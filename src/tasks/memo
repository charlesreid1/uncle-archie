tasks are lower-level objects
that define a sequence of actions
to take based on the contents
of a payload.

tests are used to run a particular
test and use the result to mark a
github commit as pass/fail.

tasks are usually running commands
to prepare for a test, like git 
clone and checkout and submodule
update.

then you run any/all tests and you
mark the commit as pass/fail.



---------------------------------



we have lots of tasks:

- base tasks that define setup/teardown or other utility methods

- pr tasks that define how to do a task with a pr

- dcppc tasks that define tasks specific to the dcppc
    - private_www_build_test
    - private_www_integration_test
    - etc.
    - these, in turn, drive any base classes we might want
        - pull request builder - call a build() function on a pull request
            - process_payload() in payload handler calls process_payload() in task calls build()
            - everybody keeps passing on the same parameters
        - pull request creator
        - mkdocs build test, mkdocs integration test
        - deployment pipeline
        - where does it stop?



--------------------------------------


list of tasks:

private www pull request builder
private www submodule integration builder
private www submodule update pull request opener
private www heroku deployer
use case library pull request builder
use case library gh-pages deployer
centillion continuous integration tester
uncle-archie continuous integration tester
private-www continuous integration tester
use case library continuous integration tester


where do task parameters go?
- task params are optional and can go 
  in the flask config
- flask config is passed in anyway, 
  so redefine there if needed



  -------------------------------------




what inputs does each task require?


(Note: "mkdocs build test" means you actually
run mkdocs build, but here we use a snakefile,
so keep it more general: build test.)


common to all tests:
- htdocs dir
- status url


private-www PR build test 
- all options from config or default value
- repo whitelist (obvious, but still)
- base branch

private-www submodule integration PR build test 
- all options from config or default value
- repo whitelist
- base branch
- submodule remap

private-www submodule update PR creator 
- all options from config or default value
- repo whitelist
- base branch
- submodule remap

private-www commit to master heroku deployer 

use-case-library PR build test 
- all options from config or default value
- repo whitelist
- base branch

use-case-library commit to master gh-pages deployer 




-------------------------



Task class hierarchy:



more abstract, base-level tasks:

- running mkdocs build and hosting output
- creating a submodule update pull request
- deploy on commit to master
    - heroku
    - gh-pages

task design: a given Task is composed of:
- sequence of commands to set up for a thing
- run a Test
    - test base class defines a run() method
    - the run takes care of running and updating status
    - test is the one that actually runs the commands
    - test has to deal with the output, scan for errors
    - test marks the commit as pass/fail
    - test moves stuff to the appropriate directory

- mark the status of the commit based on the test
    - test base class defines a method like update_status
    - this takes virtually same args as PyGithub
- a given Task may run multiple Tests
    - build test
    - serve test






