{
    "docs": [
        {
            "location": "/",
            "text": "uncle-jenkins\n\u00b6\n\n\nUncle Jenkins\n is a homebrew continuous integration server.\nIt handles pull request checks (build-test) and push-to-deploy \nfunctionality (build-test-deploy).\n\n\nUncle Jenkins is intended to run behind an nginx reverse proxy\nso that SSL can be used. This requires the server running \nUncle Jenkins be accessible at a domain name, and not just be\na bare IP address.\n\n\nTable of Contents\n\u00b6\n\n\nPreparing Jenkins:\n\n\n\n\nPreparing Jenkins\n\n\nInstalling Jenkins\n\n\nNginx and Jenkins\n\n\n\n\nConfiguring Jenkins\n\n\n\n\n\n\nJenkins Plugins: \n\n\n\n\nInstalling Plugins\n\n\n\n\nGithub Pull Request Builder\n\n\n\n\n\n\nPipelines:\n\n\n\n\nPull Request Reviews\n (in progress)\n\n\n\n\nLinks\n\u00b6\n\n\nDocumentation (you are here): \nhttps://pages.charlesreid1.com/uncle-jenkins\n\n\nSource code: \nhttps://git.charlesreid1.com/bots/uncle-jenkins\n\n\nSource code mirror: \nhttps://github.com/charlesreid1/uncle-jenkins",
            "title": "Index"
        },
        {
            "location": "/#uncle-jenkins",
            "text": "Uncle Jenkins  is a homebrew continuous integration server.\nIt handles pull request checks (build-test) and push-to-deploy \nfunctionality (build-test-deploy).  Uncle Jenkins is intended to run behind an nginx reverse proxy\nso that SSL can be used. This requires the server running \nUncle Jenkins be accessible at a domain name, and not just be\na bare IP address.",
            "title": "uncle-jenkins"
        },
        {
            "location": "/#table-of-contents",
            "text": "Preparing Jenkins:   Preparing Jenkins  Installing Jenkins  Nginx and Jenkins   Configuring Jenkins    Jenkins Plugins:    Installing Plugins   Github Pull Request Builder    Pipelines:   Pull Request Reviews  (in progress)",
            "title": "Table of Contents"
        },
        {
            "location": "/#links",
            "text": "Documentation (you are here):  https://pages.charlesreid1.com/uncle-jenkins  Source code:  https://git.charlesreid1.com/bots/uncle-jenkins  Source code mirror:  https://github.com/charlesreid1/uncle-jenkins",
            "title": "Links"
        },
        {
            "location": "/installing/",
            "text": "Installing Jenkins\n\u00b6\n\n\nThese instructions assume you are running Ubuntu 16.04.\n\n\n\n\n\n\nSee the \njenkins installation page\n\n  on jenkins.io for coverage of other platforms.\n\n\n\n\n\n\nSee \njenkins download page\n on jenkins.io\n  to download jenkins for your platform.\n\n\n\n\n\n\ninstalling jenkins with aptitude\n\u00b6\n\n\nTo install jenkins, we use aptitude, which installs\njenkins as a system service:\n\n\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\necho deb https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\nsudo apt-get update\nsudo apt-get install jenkins\n\n\n\n\n\nNow start jenkins running on port 8080:\n\n\nsudo systemctl start jenkins\n\n\n\n\n\nstarting/stopping the jenkins service\n\u00b6\n\n\nJenkins will be installed as a system service, so it can be \nstarted and stopped using systemctl:\n\n\nsudo systemctl start jenkins\nsudo systemctl stop jenkins\nsudo systemctl restart jenkins\n\n\n\n\n\nunlocking jenkins\n\u00b6\n\n\nVerify your installation went okay by visiting\n\nhttp://<server-ip>:8080\n in your browser. You should\nbe asked for an admin password, available in the file\n\n/var/lib/jenkins/secrets/initialAdminPassword\n:\n\n\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n\n\n\n\nYou can set a new user/password, or you can use\nthe admin username with the alphanumeric string in\nthe above file as the password.\n\n\nOnce you set up an admin user, you should now see\nthe following login page when you visit your jenkins\ninstance:\n\n\n\n\ninstalling nginx proxy\n\u00b6\n\n\nIf you are running Jenkins behind an nginx server (optional), \nthis is the proper time to set up the nginx server to reverse \nproxy Jenkins.\n\n\nSee \nnginx and jenkins",
            "title": "Installing Jenkins"
        },
        {
            "location": "/installing/#installing-jenkins",
            "text": "These instructions assume you are running Ubuntu 16.04.    See the  jenkins installation page \n  on jenkins.io for coverage of other platforms.    See  jenkins download page  on jenkins.io\n  to download jenkins for your platform.",
            "title": "Installing Jenkins"
        },
        {
            "location": "/installing/#installing-jenkins-with-aptitude",
            "text": "To install jenkins, we use aptitude, which installs\njenkins as a system service:  wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\necho deb https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\nsudo apt-get update\nsudo apt-get install jenkins  Now start jenkins running on port 8080:  sudo systemctl start jenkins",
            "title": "installing jenkins with aptitude"
        },
        {
            "location": "/installing/#startingstopping-the-jenkins-service",
            "text": "Jenkins will be installed as a system service, so it can be \nstarted and stopped using systemctl:  sudo systemctl start jenkins\nsudo systemctl stop jenkins\nsudo systemctl restart jenkins",
            "title": "starting/stopping the jenkins service"
        },
        {
            "location": "/installing/#unlocking-jenkins",
            "text": "Verify your installation went okay by visiting http://<server-ip>:8080  in your browser. You should\nbe asked for an admin password, available in the file /var/lib/jenkins/secrets/initialAdminPassword :  sudo cat /var/lib/jenkins/secrets/initialAdminPassword  You can set a new user/password, or you can use\nthe admin username with the alphanumeric string in\nthe above file as the password.  Once you set up an admin user, you should now see\nthe following login page when you visit your jenkins\ninstance:",
            "title": "unlocking jenkins"
        },
        {
            "location": "/installing/#installing-nginx-proxy",
            "text": "If you are running Jenkins behind an nginx server (optional), \nthis is the proper time to set up the nginx server to reverse \nproxy Jenkins.  See  nginx and jenkins",
            "title": "installing nginx proxy"
        },
        {
            "location": "/nginx/",
            "text": "Nginx and Jenkins\n\u00b6\n\n\nbackground\n\u00b6\n\n\nwhat is nginx?\n\u00b6\n\n\nnginx is a web server that can allow for a lot more flexibility\nin routing domain names and web traffic from the frontend to\nvarious backend servers.\n\n\nOne of the more useful functionalities in nginx is the ability to\nset up a reverse proxy.\n\n\nwhat is a reverse proxy?\n\u00b6\n\n\nA proxy is defined as \nthe authority to represent someone else\n.\nTypically a proxy is set up to \"surround\" and \"wrap\" actions that\nthe user takes, and relay them to the \"outside world\" (i.e., the \nworld beyond the proxy).\n\n\nA reverse proxy means that instead of \"surrounding\" and \"wrapping\"\nthe client, a reverse proxy wraps the end server. That means that\nany requests for , say, \nhttps://jenkins.mydomain.com\n can be reverse \nproxied to \nhttp://localhost:8080/\n, where an instance of Jenkins\nis running.\n\n\nThe advantage of this is that Jenkins is not accessible via port\n8080 to outside users. Every request must pass through nginx.\n\n\nfirst steps: installing nginx\n\u00b6\n\n\nrecommend using your operating system's package manager.\n\n\napt-get install nginx\n\n\n\n\n\nOn ubuntu, this will install configuration files to\n\n\n/etc/nginx/\n\n\n\n\n\nand will make nginx a service that can be started/stopped with:\n\n\nsudo service nginx start\nsudo service nginx stop\n\n\n\n\n\nconfiguring nginx\n\u00b6\n\n\nWhat follows is an nginx configuration file for\nusing Jenkins behind an nginx reverse proxy, and\nmaking it available via a subdomain like \njenkins.mysite.com\n.\n\n\nNOTE: As a reminder the local Jenkins server is available at\n\nlocalhost:8080\n.\n\n\nHere is the nginx configuration file and the location\non disk where it should be using an aptitude-installed\nnginx:\n\n\n/etc/nginx/sites-available/jenkins.conf\n\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name jenkins.mydomain.com;\n    location / {\n        return 301 https://jenkins.mydomain.com$request_uri;\n    }\n}\n\nserver {\n    listen 443;\n    listen [::]:443;\n    server_name jenkins.mydomain.com;\n\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/jenkins.mydomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.mydomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n\n    location / {\n        proxy_set_header        Host $host:$server_port;\n        proxy_set_header        X-Real-IP $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto $scheme;\n        proxy_redirect http:// https://;\n        proxy_pass              http://localhost:8080;\n        # Required for new HTTP-based CLI\n        proxy_http_version 1.1;\n        proxy_request_buffering off;\n        proxy_buffering off; # Required for HTTP-based CLI to work over SSL\n        # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651\n        add_header 'X-SSH-Endpoint' 'jenkins.domain.tld:50022' always;\n    }\n}\n\n\n\n\n\nAlternatively, if you want your server to be publicly available on a non-standard \nport, but still use SSL, for example being available at\n\n\nhttps://jenkins.mydomain.com:8081\n\n\n\n\n\nthen you can remove the port 80 redirect and change port 443 to 8081:\n\n\nserver {\n    listen 8081;\n    listen [::]:8081;\n    server_name jenkins.mydomain.com;\n\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/jenkins.mydomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.mydomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n\n    location / {\n        proxy_set_header        Host $host:$server_port;\n        proxy_set_header        X-Real-IP $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto $scheme;\n        proxy_redirect http:// https://;\n        proxy_pass              http://localhost:8080;\n        # Required for new HTTP-based CLI\n        proxy_http_version 1.1;\n        proxy_request_buffering off;\n        proxy_buffering off; # Required for HTTP-based CLI to work over SSL\n        # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651\n        add_header 'X-SSH-Endpoint' 'jenkins.domain.tld:50022' always;\n    }\n}\n\n\n\n\n\nThe configuration file (full contents given above) should be copied to\n(requires sudo access):\n\n\n/etc/nginx/sites-available/jenkins.conf\n\n\n\n\n\nThe site should then be enabled by linking this configuration\nfile to the \nsites-enabled\n folder:\n\n\nsudo ln -fs /etc/nginx/sites-available/jenkins.conf /etc/nginx/sites-enabled/\n\n\n\n\n\nNow nginx can be restarted:\n\n\nsudo service nginx restart",
            "title": "Nginx and Jenkins"
        },
        {
            "location": "/nginx/#nginx-and-jenkins",
            "text": "",
            "title": "Nginx and Jenkins"
        },
        {
            "location": "/nginx/#background",
            "text": "",
            "title": "background"
        },
        {
            "location": "/nginx/#what-is-nginx",
            "text": "nginx is a web server that can allow for a lot more flexibility\nin routing domain names and web traffic from the frontend to\nvarious backend servers.  One of the more useful functionalities in nginx is the ability to\nset up a reverse proxy.",
            "title": "what is nginx?"
        },
        {
            "location": "/nginx/#what-is-a-reverse-proxy",
            "text": "A proxy is defined as  the authority to represent someone else .\nTypically a proxy is set up to \"surround\" and \"wrap\" actions that\nthe user takes, and relay them to the \"outside world\" (i.e., the \nworld beyond the proxy).  A reverse proxy means that instead of \"surrounding\" and \"wrapping\"\nthe client, a reverse proxy wraps the end server. That means that\nany requests for , say,  https://jenkins.mydomain.com  can be reverse \nproxied to  http://localhost:8080/ , where an instance of Jenkins\nis running.  The advantage of this is that Jenkins is not accessible via port\n8080 to outside users. Every request must pass through nginx.",
            "title": "what is a reverse proxy?"
        },
        {
            "location": "/nginx/#first-steps-installing-nginx",
            "text": "recommend using your operating system's package manager.  apt-get install nginx  On ubuntu, this will install configuration files to  /etc/nginx/  and will make nginx a service that can be started/stopped with:  sudo service nginx start\nsudo service nginx stop",
            "title": "first steps: installing nginx"
        },
        {
            "location": "/nginx/#configuring-nginx",
            "text": "What follows is an nginx configuration file for\nusing Jenkins behind an nginx reverse proxy, and\nmaking it available via a subdomain like  jenkins.mysite.com .  NOTE: As a reminder the local Jenkins server is available at localhost:8080 .  Here is the nginx configuration file and the location\non disk where it should be using an aptitude-installed\nnginx:  /etc/nginx/sites-available/jenkins.conf  server {\n    listen 80;\n    listen [::]:80;\n    server_name jenkins.mydomain.com;\n    location / {\n        return 301 https://jenkins.mydomain.com$request_uri;\n    }\n}\n\nserver {\n    listen 443;\n    listen [::]:443;\n    server_name jenkins.mydomain.com;\n\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/jenkins.mydomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.mydomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n\n    location / {\n        proxy_set_header        Host $host:$server_port;\n        proxy_set_header        X-Real-IP $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto $scheme;\n        proxy_redirect http:// https://;\n        proxy_pass              http://localhost:8080;\n        # Required for new HTTP-based CLI\n        proxy_http_version 1.1;\n        proxy_request_buffering off;\n        proxy_buffering off; # Required for HTTP-based CLI to work over SSL\n        # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651\n        add_header 'X-SSH-Endpoint' 'jenkins.domain.tld:50022' always;\n    }\n}  Alternatively, if you want your server to be publicly available on a non-standard \nport, but still use SSL, for example being available at  https://jenkins.mydomain.com:8081  then you can remove the port 80 redirect and change port 443 to 8081:  server {\n    listen 8081;\n    listen [::]:8081;\n    server_name jenkins.mydomain.com;\n\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/jenkins.mydomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.mydomain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n\n    location / {\n        proxy_set_header        Host $host:$server_port;\n        proxy_set_header        X-Real-IP $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Proto $scheme;\n        proxy_redirect http:// https://;\n        proxy_pass              http://localhost:8080;\n        # Required for new HTTP-based CLI\n        proxy_http_version 1.1;\n        proxy_request_buffering off;\n        proxy_buffering off; # Required for HTTP-based CLI to work over SSL\n        # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651\n        add_header 'X-SSH-Endpoint' 'jenkins.domain.tld:50022' always;\n    }\n}  The configuration file (full contents given above) should be copied to\n(requires sudo access):  /etc/nginx/sites-available/jenkins.conf  The site should then be enabled by linking this configuration\nfile to the  sites-enabled  folder:  sudo ln -fs /etc/nginx/sites-available/jenkins.conf /etc/nginx/sites-enabled/  Now nginx can be restarted:  sudo service nginx restart",
            "title": "configuring nginx"
        },
        {
            "location": "/configuring/",
            "text": "Configuring Jenkins\n\u00b6\n\n\nTo set up your jenkins instance, visit the jenkins configuration page.\n\n\ngetting to the jenkins configuration page\n\u00b6\n\n\nStart by logging into your Jenkins instance.\n\n\nOnce you are logged in you should see a view like this:\n\n\n\n\nAfter clicking \"Manage Jenkins\" on the left, you should see a list of menu items:\n\n\n\n\nAfter clicking the first item, \"Configure System\", you should see a page with\nmany sections:\n\n\n\n\nLet's go through some settings you can change.\n\n\nnginx users: proxy url\n\u00b6\n\n\nIf you are using Jenkins behind a proxy, the first thing you\nwill want to fix is the URL location of the Jenkins instance.\nThis should be set to the URL to reach the frontend nginx\nserver.\n\n\nIn the example below, the Jenkins server is running at \n\nhttp://localhost:8080\n while the nginx proxy server is\nat \nhttps://jenkins.nihdatacommons.us\n. The location of\nthe Jenkins server is set to \nhttps://jenkins.nihdatacommons.us\n.",
            "title": "Configuring Jenkins"
        },
        {
            "location": "/configuring/#configuring-jenkins",
            "text": "To set up your jenkins instance, visit the jenkins configuration page.",
            "title": "Configuring Jenkins"
        },
        {
            "location": "/configuring/#getting-to-the-jenkins-configuration-page",
            "text": "Start by logging into your Jenkins instance.  Once you are logged in you should see a view like this:   After clicking \"Manage Jenkins\" on the left, you should see a list of menu items:   After clicking the first item, \"Configure System\", you should see a page with\nmany sections:   Let's go through some settings you can change.",
            "title": "getting to the jenkins configuration page"
        },
        {
            "location": "/configuring/#nginx-users-proxy-url",
            "text": "If you are using Jenkins behind a proxy, the first thing you\nwill want to fix is the URL location of the Jenkins instance.\nThis should be set to the URL to reach the frontend nginx\nserver.  In the example below, the Jenkins server is running at  http://localhost:8080  while the nginx proxy server is\nat  https://jenkins.nihdatacommons.us . The location of\nthe Jenkins server is set to  https://jenkins.nihdatacommons.us .",
            "title": "nginx users: proxy url"
        },
        {
            "location": "/plugins/",
            "text": "Installing Jenkins Plugins\n\u00b6\n\n\nThe last step for getting our uncle-jenkins server prepared\nis to install the right jenkins plugins to perform the tasks\nwe want.\n\n\nplugins\n\u00b6\n\n\n\n\nGithub Pull Request Builder (GHPRB)\n - the GHPRB\n  plugin allows Jenkins to create builds on pull requests, which allows Jenkins\n  to be integrated as a PR build check step in a repository. See the\n  \nGHPRB plugin\n page.\n\n\n\n\nhow to install plugins\n\u00b6\n\n\nOnce you are logged in you should see a view like this:\n\n\n\n\nAfter clicking \"Manage Jenkins\" on the left, you should see a list of menu items:\n\n\n\n\nScroll down to the item \"Manage Plugins\" (gren puzzle piece):\n\n\n\n\nThis takes you to the plugin manager view:\n\n\n\n\nClick the Available tab to see a list of plugins that are available on the\nserver and can be installed into your Jenkins instance:\n\n\n\n\nFrom here, you can install any of the plugins listed.",
            "title": "Installing Plugins"
        },
        {
            "location": "/plugins/#installing-jenkins-plugins",
            "text": "The last step for getting our uncle-jenkins server prepared\nis to install the right jenkins plugins to perform the tasks\nwe want.",
            "title": "Installing Jenkins Plugins"
        },
        {
            "location": "/plugins/#plugins",
            "text": "Github Pull Request Builder (GHPRB)  - the GHPRB\n  plugin allows Jenkins to create builds on pull requests, which allows Jenkins\n  to be integrated as a PR build check step in a repository. See the\n   GHPRB plugin  page.",
            "title": "plugins"
        },
        {
            "location": "/plugins/#how-to-install-plugins",
            "text": "Once you are logged in you should see a view like this:   After clicking \"Manage Jenkins\" on the left, you should see a list of menu items:   Scroll down to the item \"Manage Plugins\" (gren puzzle piece):   This takes you to the plugin manager view:   Click the Available tab to see a list of plugins that are available on the\nserver and can be installed into your Jenkins instance:   From here, you can install any of the plugins listed.",
            "title": "how to install plugins"
        },
        {
            "location": "/plugins_ghprb/",
            "text": "Github Pull Request Builder (GHPRB) Jenkins Plugin\n\u00b6\n\n\nAlso see the \nplugins\n page.\n\n\ninstalling jenkins GHPRB plugin\n\u00b6\n\n\nTo enable Jenkins to build Pull Requests and act as a PR check, we need\nto install the \"Github Pull Request Builder\" plugin into Jenkins.\n\n\nUse Control + F to search for \"Github Pull Request Builder\" and check\nthe box next to it. Then click the button at the bottom that says\n\"Install without restart.\"\n\n\nNow click the Installed tab on the plugin manager page to see a list\nof plugins that are installed on the server: \n\n\n\n\nControl + F search for \"Github Pull Request Builder\" and you should\nsee it come up:\n\n\n\n\nDon't bother clicking the link, since it will take you to\nthe Jenkins wiki page for the plugin. \n\n\ngetting to the jenkins configuration page\n\u00b6\n\n\nTo configure the GHPRB plugin, start from the home view:\n\n\n\n\nAfter clicking \"Manage Jenkins\" on the left, you should see a list of menu items:\n\n\n\n\nAfter clicking the first item, \"Configure System\", you should see a page with\nmany sections:\n\n\n\n\nLet's go through how to set up the pull request build plugin\nto properly authenticate with Github.\n\n\nconfiguring jenkins GHPRB plugin\n\u00b6\n\n\nNote: these steps are based largely on the README in the\n\nGithub Pull Request Builder plugin\nrepo\n\n(on Github, of course).\n\n\nOnce at the configuration page, scroll down to the section titled\n\"Github Pull Request Builder\" (or Control + F it).\n\n\n\n\nThis has a couple of key fields:\n\n\n\n\n\n\nGithub server API URL: this is for Github Enterprise users; leave as is if\n  using Github.com\n\n\n\n\n\n\nCredentials: this is where we will add our Github credentials (log in under\n  the bot account we want Jenkins to use).\n\n\n\n\n\n\nConnect to API: we will use this to test our credentials.\n\n\n\n\n\n\nAdvanced: this button will open up a whole host of options. These are covered\n  below.\n\n\n\n\n\n\nbasic configuration\n\u00b6\n\n\nauthenticating with the Github API\n\u00b6\n\n\nClick the \"Add\" button next to credentials and select Jenkins as your \ncredentials provider. Create a credential of Kind \"Secret Text\".\nFor the Secret, you will enter a Github Personal Access Token,\nwhich we'll cover next.\n\n\nHere is what the jenkins credentials provider looks like:\n\n\n\n\nTo create a Github Authentication Token, log in to Github using the account\njenkins will review PRs as. Go to the Settings page and click Developer Settings,\nthen Personal acess tokens, or just visit \nhttps://github.com/settings/tokens\n\nonce you are logged in.\n\n\nNow click \"Generate New Token\". You will see some options like those shown\nbelow. Configure the check boxes to match those shown in the image below:\n\n\n\n\nNow create a token. The token will only be shown once, and cannot be viewed\nagain, so store it somewhere safe like a password manager.\n\n\nBack at the jenkins credentials provider window, enter the\nAPI key you generated into the \"Secret\" field. Leave the\nother fields blank. Click Add.\n\n\nHere's what the Github Pull Request Builder section of the jenkins configuration \npage will look like once you've authenticated with Github: \n\n\n\n\nNow test the authentication mechanism by clicking Test Credentials.\n\n\ntesting authentication with Github\n\u00b6\n\n\nThere are several tests to run to ensure Github authentication is\nworking okay.\n\n\nStarting from the Github Pull Request Builder section of the configuration\npage, click the Test Credentials button:\n\n\n\n\nThis opens several checkboxes with options. To run the given test,\nyou check the box. (Weird, I know.)\n\n\n\n\nWhen you check the \"Test basic connection to Github\" box, you'll see\nthe results of checking that you can connect to Github:\n\n\n\n\nEnter a repository that your Jenkins user should have access to, \nand then check the next checkbox, \"Test Permissions to a Repository\":\n\n\n\n\nFor the next test, you should create a pull request in the repository\nthat you entered in the text box. You can do this easily by opening\nthe README file in your repository, clicking the pencil \"Edit\" button\nin Github, and adding an empty line at the top of the file.\n\n\nWhen you click the green submit button, make sure you select the option\nto create a new branch and start a pull request. Once you have submitted\nthe change as a pull request, click the \"Pull Requests\" tab of the repository\nand find the pull request's number. In the example below, the pull request\nis #1:\n\n\n\n\nWhen you click \"Comment to Issue\", Jenkins will use the Github credentials\nto attempt to leave the comment specified in the text box in the pull\nrequest thread.\n\n\nHere's what it should look like if everything goes according to plan:\n\n\n\n\nLet's keep moving through the tests, there is still one more to get through!\n\n\nThe last test is the most important, and that is testing whether the Jenkins\nserver can mark a pull request as passing or failing checks, or whether they\nresulted in an error.\n\n\nClick the \"Test updating commit status\" button and it will give several\noptions to set. For the commit hash, use the commit hash of the single\ncommit in the pull request. We will test setting the state to FAILURE.\n\n\nThe other settings will make more sense in context, but we can set a\nURL that links to a page with more details on the build, a message\nto post about the failure, and some context (more info).\n\n\nHere is what the settings look like filled out:\n\n\n\n\nWhen \"Update Status\" is clicked it results in the following change to\nthe pull request page:\n\n\n\n\nNote that the pull request can still be merged, but in the repository\nsettings we can require that build checks pass before any pull requests\ncan be merged.",
            "title": "Github Pull Request Builder"
        },
        {
            "location": "/plugins_ghprb/#github-pull-request-builder-ghprb-jenkins-plugin",
            "text": "Also see the  plugins  page.",
            "title": "Github Pull Request Builder (GHPRB) Jenkins Plugin"
        },
        {
            "location": "/plugins_ghprb/#installing-jenkins-ghprb-plugin",
            "text": "To enable Jenkins to build Pull Requests and act as a PR check, we need\nto install the \"Github Pull Request Builder\" plugin into Jenkins.  Use Control + F to search for \"Github Pull Request Builder\" and check\nthe box next to it. Then click the button at the bottom that says\n\"Install without restart.\"  Now click the Installed tab on the plugin manager page to see a list\nof plugins that are installed on the server:    Control + F search for \"Github Pull Request Builder\" and you should\nsee it come up:   Don't bother clicking the link, since it will take you to\nthe Jenkins wiki page for the plugin.",
            "title": "installing jenkins GHPRB plugin"
        },
        {
            "location": "/plugins_ghprb/#getting-to-the-jenkins-configuration-page",
            "text": "To configure the GHPRB plugin, start from the home view:   After clicking \"Manage Jenkins\" on the left, you should see a list of menu items:   After clicking the first item, \"Configure System\", you should see a page with\nmany sections:   Let's go through how to set up the pull request build plugin\nto properly authenticate with Github.",
            "title": "getting to the jenkins configuration page"
        },
        {
            "location": "/plugins_ghprb/#configuring-jenkins-ghprb-plugin",
            "text": "Note: these steps are based largely on the README in the Github Pull Request Builder plugin\nrepo \n(on Github, of course).  Once at the configuration page, scroll down to the section titled\n\"Github Pull Request Builder\" (or Control + F it).   This has a couple of key fields:    Github server API URL: this is for Github Enterprise users; leave as is if\n  using Github.com    Credentials: this is where we will add our Github credentials (log in under\n  the bot account we want Jenkins to use).    Connect to API: we will use this to test our credentials.    Advanced: this button will open up a whole host of options. These are covered\n  below.",
            "title": "configuring jenkins GHPRB plugin"
        },
        {
            "location": "/plugins_ghprb/#basic-configuration",
            "text": "",
            "title": "basic configuration"
        },
        {
            "location": "/plugins_ghprb/#authenticating-with-the-github-api",
            "text": "Click the \"Add\" button next to credentials and select Jenkins as your \ncredentials provider. Create a credential of Kind \"Secret Text\".\nFor the Secret, you will enter a Github Personal Access Token,\nwhich we'll cover next.  Here is what the jenkins credentials provider looks like:   To create a Github Authentication Token, log in to Github using the account\njenkins will review PRs as. Go to the Settings page and click Developer Settings,\nthen Personal acess tokens, or just visit  https://github.com/settings/tokens \nonce you are logged in.  Now click \"Generate New Token\". You will see some options like those shown\nbelow. Configure the check boxes to match those shown in the image below:   Now create a token. The token will only be shown once, and cannot be viewed\nagain, so store it somewhere safe like a password manager.  Back at the jenkins credentials provider window, enter the\nAPI key you generated into the \"Secret\" field. Leave the\nother fields blank. Click Add.  Here's what the Github Pull Request Builder section of the jenkins configuration \npage will look like once you've authenticated with Github:    Now test the authentication mechanism by clicking Test Credentials.",
            "title": "authenticating with the Github API"
        },
        {
            "location": "/plugins_ghprb/#testing-authentication-with-github",
            "text": "There are several tests to run to ensure Github authentication is\nworking okay.  Starting from the Github Pull Request Builder section of the configuration\npage, click the Test Credentials button:   This opens several checkboxes with options. To run the given test,\nyou check the box. (Weird, I know.)   When you check the \"Test basic connection to Github\" box, you'll see\nthe results of checking that you can connect to Github:   Enter a repository that your Jenkins user should have access to, \nand then check the next checkbox, \"Test Permissions to a Repository\":   For the next test, you should create a pull request in the repository\nthat you entered in the text box. You can do this easily by opening\nthe README file in your repository, clicking the pencil \"Edit\" button\nin Github, and adding an empty line at the top of the file.  When you click the green submit button, make sure you select the option\nto create a new branch and start a pull request. Once you have submitted\nthe change as a pull request, click the \"Pull Requests\" tab of the repository\nand find the pull request's number. In the example below, the pull request\nis #1:   When you click \"Comment to Issue\", Jenkins will use the Github credentials\nto attempt to leave the comment specified in the text box in the pull\nrequest thread.  Here's what it should look like if everything goes according to plan:   Let's keep moving through the tests, there is still one more to get through!  The last test is the most important, and that is testing whether the Jenkins\nserver can mark a pull request as passing or failing checks, or whether they\nresulted in an error.  Click the \"Test updating commit status\" button and it will give several\noptions to set. For the commit hash, use the commit hash of the single\ncommit in the pull request. We will test setting the state to FAILURE.  The other settings will make more sense in context, but we can set a\nURL that links to a page with more details on the build, a message\nto post about the failure, and some context (more info).  Here is what the settings look like filled out:   When \"Update Status\" is clicked it results in the following change to\nthe pull request page:   Note that the pull request can still be merged, but in the repository\nsettings we can require that build checks pass before any pull requests\ncan be merged.",
            "title": "testing authentication with Github"
        }
    ]
}